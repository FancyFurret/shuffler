@using Shuffler.Core
@inherits ObserverComponent
@using Shuffler.UI.Services
@using Blazor.Heroicons
@using Shuffler.Core.Models
@using Shuffler.Core.Services
@using Shuffler.UI.Components.Common
@implements IDisposable

<div
    class="w-[180px] bg-background-800/50 rounded-lg overflow-hidden border border-background-700/50 hover:border-primary/50 transition-all relative group">
    <div class="relative aspect-[2/3]">
        <div class="absolute inset-0 overflow-hidden">
            <!-- Main image centered -->
            <div class="absolute inset-0 flex items-center justify-center">
                @{
                    var imageClass = $"w-full h-full object-contain group-hover:blur-sm transition-all {(!Running ? "grayscale" : Suspended ? "opacity-50" : "")}";
                }
                <GameImage Game="Game.Config" Size="GameImage.GameImageSize.Portrait" Class="@imageClass" BackupIconClass="w-1/2 h-1/2" />
            </div>
        </div>

        <!-- Status Overlay -->
        <div
            class="absolute inset-0 bg-gradient-to-t from-background-900/90 via-background-900/20 to-transparent group-hover:via-background-900/40 transition-all">
            <div class="absolute bottom-0 left-0 right-0 p-3 flex justify-between items-center">
                <h3 class="text-base font-medium text-white truncate flex-1">@Game.Config.Name</h3>
                @if (Running)
                {
                    <div class="text-foreground-400">
                        <Heroicon Name="@(Game.Muted.Value ? "speaker-x-mark" : "speaker-wave")" Type="HeroiconType.Mini"
                            class="w-5 h-5" />
                    </div>
                }
            </div>
        </div>

        <!-- Controls Overlay -->
        <div
            class="absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity bg-background-900/60 z-20">
            @if (Loading)
            {
                <div class="w-16 h-16 flex items-center justify-center rounded-full bg-background-600/90">
                    <div
                        class="w-8 h-8 border-4 border-t-primary border-r-primary border-b-primary/30 border-l-primary/30 rounded-full animate-spin">
                    </div>
                </div>
            }
            else if (!Running)
            {
                <button @onclick="StartGame"
                    class="w-16 h-16 flex items-center justify-center rounded-full bg-background-600/90 text-success hover:text-success hover:bg-background-500/90 hover:scale-110 transition-all"
                    title="Start">
                    <Heroicon Name="play" Type="HeroiconType.Solid" class="w-8 h-8" />
                </button>
            }
            else
            {
                <div class="flex flex-col items-center gap-4">
                    <div class="flex gap-4 relative z-30">
                        @if (Suspended)
                        {
                            <button @onclick="ResumeGame"
                                class="w-16 h-16 flex items-center justify-center rounded-full bg-background-600/90 text-success hover:text-success hover:bg-background-500/90 hover:scale-110 transition-all"
                                title="Resume">
                                <Heroicon Name="play" Type="HeroiconType.Solid" class="w-8 h-8" />
                            </button>
                        }
                        else
                        {
                            <button @onclick="PauseGame"
                                class="w-16 h-16 flex items-center justify-center rounded-full bg-background-600/90 text-warning hover:text-warning hover:bg-background-500/90 hover:scale-110 transition-all"
                                title="Pause">
                                <Heroicon Name="pause" Type="HeroiconType.Solid" class="w-8 h-8" />
                            </button>
                        }
                        <button @onclick="StopGame"
                            class="w-16 h-16 flex items-center justify-center rounded-full bg-background-600/90 text-error hover:text-error hover:bg-background-500/90 hover:scale-110 transition-all"
                            title="Stop">
                            <Heroicon Name="stop" Type="HeroiconType.Solid" class="w-8 h-8" />
                        </button>
                    </div>
                    <button @onclick="ToggleMute"
                        class="w-12 h-12 flex items-center justify-center rounded-full bg-background-600/90 text-foreground-400 hover:text-foreground-200 hover:bg-background-500/90 hover:scale-110 transition-all relative z-30"
                        title="@(Game.Muted.Value ? "Unmute" : "Mute")">
                        <Heroicon Name="@(Game.Muted.Value ? "speaker-x-mark" : "speaker-wave")" Type="HeroiconType.Solid"
                            class="w-6 h-6" />
                    </button>
                </div>
            }
        </div>

        <!-- Status Indicators -->
        <!-- Corner Status Ribbon -->
        <div class="absolute -top-px -right-px z-10">
            <div class="relative">
                <div class="absolute top-0 right-0 h-24 w-24 overflow-hidden">
                    <div
                        class="absolute top-0 right-0 w-[150%] h-6 origin-bottom-right rotate-45 @GetStatusRibbonColor() opacity-90">
                    </div>
                </div>
            </div>
        </div>

        <!-- Status Icon -->
        @if (Loading)
        {
            <div class="absolute top-3 right-3 text-primary drop-shadow z-10">
                <div
                    class="w-5 h-5 border-2 border-t-primary border-r-primary border-b-primary/30 border-l-primary/30 rounded-full animate-spin">
                </div>
            </div>
        }
        else if (!Running)
        {
            <div class="absolute top-3 right-3 text-error drop-shadow z-10">
                <Heroicon Name="stop" Type="HeroiconType.Mini" class="w-5 h-5" />
            </div>
        }
        else if (Suspended)
        {
            <div class="absolute top-3 right-3 text-warning drop-shadow z-10">
                <Heroicon Name="pause" Type="HeroiconType.Mini" class="w-5 h-5" />
            </div>
        }
        else
        {
            <div class="absolute top-3 right-3 text-success drop-shadow z-10">
                <Heroicon Name="play" Type="HeroiconType.Mini" class="w-5 h-5" />
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public GameProcess Game { get; set; } = null!;

    private void Changed() => InvokeAsync(StateHasChanged);

    private GameState State => Observe(Game.State);
    private bool Running => State != GameState.Stopped;
    private bool Suspended => State == GameState.Paused;
    private bool Loading => State == GameState.Loading;

    private string GetStatusColor()
    {
        if (Loading) return "text-primary";
        if (!Running) return "text-error";
        return Suspended ? "text-warning" : "text-success";
    }

    private string GetStatusDotColor()
    {
        if (Loading) return "bg-primary";
        if (!Running) return "bg-error";
        return Suspended ? "bg-warning" : "bg-success";
    }

    private string GetStatusRibbonColor()
    {
        if (Loading) return "bg-primary";
        if (!Running) return "bg-error";
        return Suspended ? "bg-warning" : "bg-success";
    }

    private async Task StartGame()
    {
        await Game.StartAsync();
    }

    private void PauseGame()
    {
        Game.Suspend();
    }

    private void ResumeGame()
    {
        Game.Resume();
    }

    private async Task StopGame()
    {
        await Game.StopAsync();
    }

    private void ToggleMute()
    {
        Game.ToggleMute();
    }
}